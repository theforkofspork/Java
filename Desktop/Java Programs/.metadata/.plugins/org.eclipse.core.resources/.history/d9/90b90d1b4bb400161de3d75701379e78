package thing.main;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;


public class Thing extends Canvas implements Runnable
{

	private static final long serialVersionUID = 1L;
	private Thread thread;
	private boolean threadRunning = false;
	
	public Thing()
	{
		new Frame(this);
	}

	public synchronized void start()
	{
		thread = new Thread(this);
		thread.start();
		threadRunning = true;
	}
	
	public synchronized void stop()
	{
		try{
			thread.join();
			threadRunning = false;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	private void tick()
	{
		
	}
	
	private void render()
	{
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null)
		{
			this.createBufferStrategy(3);
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
		
		g.setColor(Color.black);
		g.fillRect(0, 0, 100, 100);
		
		g.dispose();
		bs.show();
	}
	
	public void run() 
	{
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		while(threadRunning)
		{
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			
			while(delta >= 1)
			{
				tick();
				delta--;
			}
			
			if(threadRunning) 
				render();
			frames++;
			
			if(System.currentTimeMillis() - timer > 1000)
			{
				timer += 1000;
				System.out.println("FPS: " + frames);
				frames = 0;
			}
		}
		stop();
		
	}
	
}
